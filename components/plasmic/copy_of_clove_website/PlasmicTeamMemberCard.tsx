// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eV7Xi9hgseajGR8GcVFgnT
// Component: 7tob782ltHq5pD
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_clove_website.module.css"; // plasmic-import: eV7Xi9hgseajGR8GcVFgnT/projectcss
import * as sty from "./PlasmicTeamMemberCard.module.css"; // plasmic-import: 7tob782ltHq5pD/css

import LinkedinLogosvgIcon from "./icons/PlasmicIcon__LinkedinLogosvg"; // plasmic-import: PWYjwIiH9_8Pdl/icon

export type PlasmicTeamMemberCard__VariantMembers = {};

export type PlasmicTeamMemberCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicTeamMemberCard__VariantsArgs;
export const PlasmicTeamMemberCard__VariantProps = new Array<VariantPropType>();

export type PlasmicTeamMemberCard__ArgsType = {
  image?: React.ReactNode;
  name?: React.ReactNode;
  role?: React.ReactNode;
  linkedin?: string | PageHref;
};

type ArgPropType = keyof PlasmicTeamMemberCard__ArgsType;
export const PlasmicTeamMemberCard__ArgProps = new Array<ArgPropType>(
  "image",
  "name",
  "role",
  "linkedin"
);

export type PlasmicTeamMemberCard__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  svg?: p.Flex<"svg">;
};

export interface DefaultTeamMemberCardProps {
  image?: React.ReactNode;
  name?: React.ReactNode;
  role?: React.ReactNode;
  linkedin?: string | PageHref;
  className?: string;
}

function PlasmicTeamMemberCard__RenderFunc(props: {
  variants: PlasmicTeamMemberCard__VariantsArgs;
  args: PlasmicTeamMemberCard__ArgsType;
  overrides: PlasmicTeamMemberCard__OverridesType;
  dataFetches?: PlasmicTeamMemberCard__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box__xIu0E)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__swUeS)}
              role={"img"}
              src={"/plasmic/copy_of_clove_website/images/personpng.png"}
            />
          ),

          value: args.image
        })}
      </div>

      <div className={classNames(defaultcss.all, sty.box__rl8Jo)}>
        {p.renderPlasmicSlot({
          defaultContents: "Martin Staadecker",
          value: args.name,
          className: classNames(sty.slotName)
        })}

        {p.renderPlasmicSlot({
          defaultContents: "Co-Founder",
          value: args.role,
          className: classNames(sty.slotRole)
        })}
      </div>

      <p.PlasmicLink
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(defaultcss.all, sty.link)}
        component={Link}
        href={args.linkedin}
        platform={"nextjs"}
      >
        <LinkedinLogosvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, sty.svg)}
          role={"img"}
        />
      </p.PlasmicLink>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "svg"],
  link: ["link", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTeamMemberCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTeamMemberCard__VariantsArgs;
    args?: PlasmicTeamMemberCard__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTeamMemberCard__Fetches;
  } & Omit<PlasmicTeamMemberCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTeamMemberCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTeamMemberCard__ArgProps,
      internalVariantPropNames: PlasmicTeamMemberCard__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTeamMemberCard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTeamMemberCard";
  } else {
    func.displayName = `PlasmicTeamMemberCard.${nodeName}`;
  }
  return func;
}

export const PlasmicTeamMemberCard = Object.assign(
  // Top-level PlasmicTeamMemberCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicTeamMemberCard
    internalVariantProps: PlasmicTeamMemberCard__VariantProps,
    internalArgProps: PlasmicTeamMemberCard__ArgProps
  }
);

export default PlasmicTeamMemberCard;
/* prettier-ignore-end */
