// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eV7Xi9hgseajGR8GcVFgnT
// Component: acUXApEsmhTkwY
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_clove_website.module.css"; // plasmic-import: eV7Xi9hgseajGR8GcVFgnT/projectcss
import * as sty from "./PlasmicProcessCard.module.css"; // plasmic-import: acUXApEsmhTkwY/css

export type PlasmicProcessCard__VariantMembers = {
  colors: "green" | "offWhite" | "purple";
  mobile: "mobile";
};

export type PlasmicProcessCard__VariantsArgs = {
  colors?: SingleChoiceArg<"green" | "offWhite" | "purple">;
  mobile?: SingleBooleanChoiceArg<"mobile">;
};

type VariantPropType = keyof PlasmicProcessCard__VariantsArgs;
export const PlasmicProcessCard__VariantProps = new Array<VariantPropType>(
  "colors",
  "mobile"
);

export type PlasmicProcessCard__ArgsType = {
  children?: React.ReactNode;
  title?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicProcessCard__ArgsType;
export const PlasmicProcessCard__ArgProps = new Array<ArgPropType>(
  "children",
  "title",
  "slot"
);

export type PlasmicProcessCard__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultProcessCardProps {
  children?: React.ReactNode;
  title?: React.ReactNode;
  slot?: React.ReactNode;
  colors?: SingleChoiceArg<"green" | "offWhite" | "purple">;
  mobile?: SingleBooleanChoiceArg<"mobile">;
  className?: string;
}

function PlasmicProcessCard__RenderFunc(props: {
  variants: PlasmicProcessCard__VariantsArgs;
  args: PlasmicProcessCard__ArgsType;
  overrides: PlasmicProcessCard__OverridesType;
  dataFetches?: PlasmicProcessCard__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__iDeFa, {
          [sty.box__colors_offWhite__iDeFAcTimj]: hasVariant(
            variants,
            "colors",
            "offWhite"
          ),
          [sty.box__colors_purple__iDeFAzMnc]: hasVariant(
            variants,
            "colors",
            "purple"
          ),
          [sty.box__mobile__iDeFAvkaxl]: hasVariant(
            variants,
            "mobile",
            "mobile"
          )
        })}
      >
        <div
          className={classNames(defaultcss.all, sty.box___7XBtz, {
            [sty.box__mobile___7XBtZvkaxl]: hasVariant(
              variants,
              "mobile",
              "mobile"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__itR7F
                )}
              >
                <span>
                  <span style={{ fontStyle: "italic" }}>{"01"}</span>
                </span>
              </div>
            ),

            value: args.children,
            className: classNames(sty.slotChildren, {
              [sty.slotChildren__mobile]: hasVariant(
                variants,
                "mobile",
                "mobile"
              )
            })
          })}
        </div>

        <div className={classNames(defaultcss.all, sty.box__gQJp)}>
          <div className={classNames(defaultcss.all, sty.box__gkxdk)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__zeOj0)}
                  role={"img"}
                  src={
                    "/plasmic/copy_of_clove_website/images/surveyIconpng.png"
                  }
                />
              ),

              value: args.slot
            })}
          </div>

          <div className={classNames(defaultcss.all, sty.box__dn1A)}>
            {p.renderPlasmicSlot({
              defaultContents:
                "We measure the environmental impact of small businesses.",
              value: args.title,
              className: classNames(sty.slotTitle, {
                [sty.slotTitle__colors_purple]: hasVariant(
                  variants,
                  "colors",
                  "purple"
                )
              })
            })}
          </div>
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProcessCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProcessCard__VariantsArgs;
    args?: PlasmicProcessCard__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicProcessCard__Fetches;
  } & Omit<PlasmicProcessCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProcessCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProcessCard__ArgProps,
      internalVariantPropNames: PlasmicProcessCard__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicProcessCard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProcessCard";
  } else {
    func.displayName = `PlasmicProcessCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProcessCard = Object.assign(
  // Top-level PlasmicProcessCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicProcessCard
    internalVariantProps: PlasmicProcessCard__VariantProps,
    internalArgProps: PlasmicProcessCard__ArgProps
  }
);

export default PlasmicProcessCard;
/* prettier-ignore-end */
