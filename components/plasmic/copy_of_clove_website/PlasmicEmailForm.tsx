// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eV7Xi9hgseajGR8GcVFgnT
// Component: 6qD4dHE1Z4oho
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SubmitButton from "../../SubmitButton"; // plasmic-import: srr7ZVIUQAh-6/component
import FormThankYou from "../../FormThankYou"; // plasmic-import: -HcGzCHHRJliz/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_clove_website.module.css"; // plasmic-import: eV7Xi9hgseajGR8GcVFgnT/projectcss
import * as sty from "./PlasmicEmailForm.module.css"; // plasmic-import: 6qD4dHE1Z4oho/css

export type PlasmicEmailForm__VariantMembers = {
  submitted: "submitted";
};

export type PlasmicEmailForm__VariantsArgs = {
  submitted?: SingleBooleanChoiceArg<"submitted">;
};

type VariantPropType = keyof PlasmicEmailForm__VariantsArgs;
export const PlasmicEmailForm__VariantProps = new Array<VariantPropType>(
  "submitted"
);

export type PlasmicEmailForm__ArgsType = {};
type ArgPropType = keyof PlasmicEmailForm__ArgsType;
export const PlasmicEmailForm__ArgProps = new Array<ArgPropType>();

export type PlasmicEmailForm__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  firstName?: p.Flex<"input">;
  firstNameError?: p.Flex<"div">;
  email?: p.Flex<"input">;
  emailError?: p.Flex<"div">;
  submitButton?: p.Flex<typeof SubmitButton>;
  formThankYou?: p.Flex<typeof FormThankYou>;
};

export interface DefaultEmailFormProps {
  submitted?: SingleBooleanChoiceArg<"submitted">;
  className?: string;
}

function PlasmicEmailForm__RenderFunc(props: {
  variants: PlasmicEmailForm__VariantsArgs;
  args: PlasmicEmailForm__ArgsType;
  overrides: PlasmicEmailForm__OverridesType;
  dataFetches?: PlasmicEmailForm__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {(hasVariant(variants, "submitted", "submitted") ? false : true) ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(defaultcss.all, sty.freeBox, {
            [sty.freeBox__submitted]: hasVariant(
              variants,
              "submitted",
              "submitted"
            )
          })}
        >
          <input
            data-plasmic-name={"firstName"}
            data-plasmic-override={overrides.firstName}
            className={classNames(defaultcss.input, sty.firstName)}
            placeholder={"FIRST NAME" as const}
            size={1 as const}
            type={"text" as const}
          />

          <div
            data-plasmic-name={"firstNameError"}
            data-plasmic-override={overrides.firstNameError}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.firstNameError
            )}
          >
            {"Enter some text"}
          </div>

          <input
            data-plasmic-name={"email"}
            data-plasmic-override={overrides.email}
            className={classNames(defaultcss.input, sty.email)}
            placeholder={"EMAIL" as const}
            size={1 as const}
            type={"text" as const}
            value={"" as const}
          />

          <div
            data-plasmic-name={"emailError"}
            data-plasmic-override={overrides.emailError}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.emailError
            )}
          >
            {"Enter some text"}
          </div>

          <SubmitButton
            data-plasmic-name={"submitButton"}
            data-plasmic-override={overrides.submitButton}
            className={classNames("__wab_instance", sty.submitButton)}
          />
        </div>
      ) : null}
      {(hasVariant(variants, "submitted", "submitted") ? true : false) ? (
        <FormThankYou
          data-plasmic-name={"formThankYou"}
          data-plasmic-override={overrides.formThankYou}
          className={classNames("__wab_instance", sty.formThankYou, {
            [sty.formThankYou__submitted]: hasVariant(
              variants,
              "submitted",
              "submitted"
            )
          })}
        />
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "firstName",
    "firstNameError",
    "email",
    "emailError",
    "submitButton",
    "formThankYou"
  ],
  freeBox: [
    "freeBox",
    "firstName",
    "firstNameError",
    "email",
    "emailError",
    "submitButton"
  ],
  firstName: ["firstName"],
  firstNameError: ["firstNameError"],
  email: ["email"],
  emailError: ["emailError"],
  submitButton: ["submitButton"],
  formThankYou: ["formThankYou"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  firstName: "input";
  firstNameError: "div";
  email: "input";
  emailError: "div";
  submitButton: typeof SubmitButton;
  formThankYou: typeof FormThankYou;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEmailForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEmailForm__VariantsArgs;
    args?: PlasmicEmailForm__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicEmailForm__Fetches;
  } & Omit<PlasmicEmailForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEmailForm__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEmailForm__ArgProps,
      internalVariantPropNames: PlasmicEmailForm__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicEmailForm__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEmailForm";
  } else {
    func.displayName = `PlasmicEmailForm.${nodeName}`;
  }
  return func;
}

export const PlasmicEmailForm = Object.assign(
  // Top-level PlasmicEmailForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    firstName: makeNodeComponent("firstName"),
    firstNameError: makeNodeComponent("firstNameError"),
    email: makeNodeComponent("email"),
    emailError: makeNodeComponent("emailError"),
    submitButton: makeNodeComponent("submitButton"),
    formThankYou: makeNodeComponent("formThankYou"),

    // Metadata about props expected for PlasmicEmailForm
    internalVariantProps: PlasmicEmailForm__VariantProps,
    internalArgProps: PlasmicEmailForm__ArgProps
  }
);

export default PlasmicEmailForm;
/* prettier-ignore-end */
