// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eV7Xi9hgseajGR8GcVFgnT
// Component: y0PFOIKIN4jva
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeaderLinks from "../../HeaderLinks"; // plasmic-import: xnRJlhLH2Edsl/component
import MenuIcon from "../../MenuIcon"; // plasmic-import: yu4cL-EFIGe4C/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_clove_website.module.css"; // plasmic-import: eV7Xi9hgseajGR8GcVFgnT/projectcss
import * as sty from "./PlasmicHeader.module.css"; // plasmic-import: y0PFOIKIN4jva/css

export type PlasmicHeader__VariantMembers = {
  desktop: "desktop";
  open: "open";
  goBack: "goBack";
};

export type PlasmicHeader__VariantsArgs = {
  desktop?: SingleBooleanChoiceArg<"desktop">;
  open?: SingleBooleanChoiceArg<"open">;
  goBack?: SingleBooleanChoiceArg<"goBack">;
};

type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>(
  "desktop",
  "open",
  "goBack"
);

export type PlasmicHeader__ArgsType = {};
type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>();

export type PlasmicHeader__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  img?: p.Flex<"img">;
  menuIcon?: p.Flex<typeof MenuIcon>;
};

export interface DefaultHeaderProps {
  desktop?: SingleBooleanChoiceArg<"desktop">;
  open?: SingleBooleanChoiceArg<"open">;
  goBack?: SingleBooleanChoiceArg<"goBack">;
  className?: string;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;
  dataFetches?: PlasmicHeader__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(defaultcss.all, sty.freeBox, {
          [sty.freeBox__desktop]: hasVariant(variants, "desktop", "desktop"),
          [sty.freeBox__goBack]: hasVariant(variants, "goBack", "goBack")
        })}
      >
        <p.PlasmicLink
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(defaultcss.all, sty.link)}
          component={Link}
          href={"/" as const}
          platform={"nextjs"}
        >
          <img
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(defaultcss.img, sty.img)}
            role={"img"}
            src={
              "/plasmic/copy_of_clove_website/images/clovBrandPlaybookpng.png"
            }
          />
        </p.PlasmicLink>

        {(hasVariant(variants, "desktop", "desktop") ? true : false) ? (
          <HeaderLinks
            className={classNames("__wab_instance", sty.headerLinks__txGHy, {
              [sty.headerLinks__desktop__txGHyT1YFg]: hasVariant(
                variants,
                "desktop",
                "desktop"
              ),
              [sty.headerLinks__goBack__txGHy1OD9K]: hasVariant(
                variants,
                "goBack",
                "goBack"
              )
            })}
            goBack={
              hasVariant(variants, "goBack", "goBack")
                ? ("goBack" as const)
                : undefined
            }
          />
        ) : null}
        {(hasVariant(variants, "desktop", "desktop") ? false : true) ? (
          <MenuIcon
            data-plasmic-name={"menuIcon"}
            data-plasmic-override={overrides.menuIcon}
            className={classNames("__wab_instance", sty.menuIcon, {
              [sty.menuIcon__desktop]: hasVariant(
                variants,
                "desktop",
                "desktop"
              ),
              [sty.menuIcon__open]: hasVariant(variants, "open", "open")
            })}
            open={
              hasVariant(variants, "open", "open")
                ? ("open" as const)
                : undefined
            }
          />
        ) : null}
      </div>

      {(hasVariant(variants, "open", "open") ? true : false) ? (
        <HeaderLinks
          className={classNames("__wab_instance", sty.headerLinks__gDlgd, {
            [sty.headerLinks__goBack__gDlgd1OD9K]: hasVariant(
              variants,
              "goBack",
              "goBack"
            ),
            [sty.headerLinks__open__gDlgdapCrf]: hasVariant(
              variants,
              "open",
              "open"
            )
          })}
          goBack={
            hasVariant(variants, "goBack", "goBack")
              ? ("goBack" as const)
              : undefined
          }
          verticalStack={"verticalStack" as const}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "link", "img", "menuIcon"],
  freeBox: ["freeBox", "link", "img", "menuIcon"],
  link: ["link", "img"],
  img: ["img"],
  menuIcon: ["menuIcon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  link: "a";
  img: "img";
  menuIcon: typeof MenuIcon;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHeader__Fetches;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeader__ArgProps,
      internalVariantPropNames: PlasmicHeader__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    menuIcon: makeNodeComponent("menuIcon"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
