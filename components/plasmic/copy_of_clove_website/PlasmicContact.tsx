// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eV7Xi9hgseajGR8GcVFgnT
// Component: XmN92Nv4-pcVq-
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Page from "../../Page"; // plasmic-import: sCBjEr90b1mbPB/component
import Section from "../../Section"; // plasmic-import: iMtv5NCElk1PK/component
import ContactCard from "../../ContactCard"; // plasmic-import: DzjLF3G6lYSWQc/component
import TeamMembers from "../../TeamMembers"; // plasmic-import: swBP63kONzdkSI/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_clove_website.module.css"; // plasmic-import: eV7Xi9hgseajGR8GcVFgnT/projectcss
import * as sty from "./PlasmicContact.module.css"; // plasmic-import: XmN92Nv4-pcVq-/css

export type PlasmicContact__VariantMembers = {};

export type PlasmicContact__VariantsArgs = {};
type VariantPropType = keyof PlasmicContact__VariantsArgs;
export const PlasmicContact__VariantProps = new Array<VariantPropType>();

export type PlasmicContact__ArgsType = {};
type ArgPropType = keyof PlasmicContact__ArgsType;
export const PlasmicContact__ArgProps = new Array<ArgPropType>();

export type PlasmicContact__OverridesType = {
  root?: p.Flex<"div">;
  page?: p.Flex<typeof Page>;
  contactCard?: p.Flex<typeof ContactCard>;
  teamMembers?: p.Flex<typeof TeamMembers>;
};

export interface DefaultContactProps {
  dataFetches: PlasmicContact__Fetches;
}

function PlasmicContact__RenderFunc(props: {
  variants: PlasmicContact__VariantsArgs;
  args: PlasmicContact__ArgsType;
  overrides: PlasmicContact__OverridesType;
  dataFetches?: PlasmicContact__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{"Contact Us"}</title>
        <meta key="og:title" property="og:title" content={"Contact Us"} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Page
            data-plasmic-name={"page"}
            data-plasmic-override={overrides.page}
            className={classNames("__wab_instance", sty.page)}
            content={
              <React.Fragment>
                <div className={classNames(defaultcss.all, sty.freeBox__t4QE)}>
                  <Section
                    className={classNames("__wab_instance", sty.section__ohGV)}
                    content={
                      <React.Fragment>
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.freeBox___53PgN
                          )}
                        >
                          {"Get in Touch"}
                        </div>

                        <ContactCard
                          data-plasmic-name={"contactCard"}
                          data-plasmic-override={overrides.contactCard}
                          className={classNames(
                            "__wab_instance",
                            sty.contactCard
                          )}
                        >
                          <div
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.freeBox__ifpB0
                            )}
                          >
                            {
                              "Know a business that should get assessed? Have a question? Let us know!"
                            }
                          </div>
                        </ContactCard>
                      </React.Fragment>
                    }
                    thinPadding={"thinPadding" as const}
                  />
                </div>

                <div className={classNames(defaultcss.all, sty.freeBox__aeod7)}>
                  <Section
                    content={
                      <React.Fragment>
                        <div
                          className={classNames(
                            defaultcss.all,
                            sty.freeBox__dtWAv
                          )}
                        >
                          <div
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.freeBox__hLmRn
                            )}
                          >
                            {"Meet Our Team"}
                          </div>
                        </div>

                        <TeamMembers
                          data-plasmic-name={"teamMembers"}
                          data-plasmic-override={overrides.teamMembers}
                          className={classNames(
                            "__wab_instance",
                            sty.teamMembers
                          )}
                        />
                      </React.Fragment>
                    }
                  />
                </div>
              </React.Fragment>
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "page", "contactCard", "teamMembers"],
  page: ["page", "contactCard", "teamMembers"],
  contactCard: ["contactCard"],
  teamMembers: ["teamMembers"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  page: typeof Page;
  contactCard: typeof ContactCard;
  teamMembers: typeof TeamMembers;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContact__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContact__VariantsArgs;
    args?: PlasmicContact__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicContact__Fetches;
  } & Omit<PlasmicContact__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicContact__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicContact__ArgProps,
      internalVariantPropNames: PlasmicContact__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicContact__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContact";
  } else {
    func.displayName = `PlasmicContact.${nodeName}`;
  }
  return func;
}

export const PlasmicContact = Object.assign(
  // Top-level PlasmicContact renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    page: makeNodeComponent("page"),
    contactCard: makeNodeComponent("contactCard"),
    teamMembers: makeNodeComponent("teamMembers"),

    // Metadata about props expected for PlasmicContact
    internalVariantProps: PlasmicContact__VariantProps,
    internalArgProps: PlasmicContact__ArgProps
  }
);

export default PlasmicContact;
/* prettier-ignore-end */
