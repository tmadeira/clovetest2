// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eV7Xi9hgseajGR8GcVFgnT
// Component: CkvbJP0C9UinrQ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Section from "../../Section"; // plasmic-import: iMtv5NCElk1PK/component
import InfoCard from "../../InfoCard"; // plasmic-import: QGA80RgFGLd73/component
import EmailForm from "../../EmailForm"; // plasmic-import: 6qD4dHE1Z4oho/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: -L1czsd8IbhiAH/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_clove_website.module.css"; // plasmic-import: eV7Xi9hgseajGR8GcVFgnT/projectcss
import * as sty from "./PlasmicActions.module.css"; // plasmic-import: CkvbJP0C9UinrQ/css

export type PlasmicActions__VariantMembers = {};

export type PlasmicActions__VariantsArgs = {};
type VariantPropType = keyof PlasmicActions__VariantsArgs;
export const PlasmicActions__VariantProps = new Array<VariantPropType>();

export type PlasmicActions__ArgsType = {};
type ArgPropType = keyof PlasmicActions__ArgsType;
export const PlasmicActions__ArgProps = new Array<ArgPropType>();

export type PlasmicActions__OverridesType = {
  root?: p.Flex<"div">;
  section?: p.Flex<typeof Section>;
  columns?: p.Flex<"div">;
  title2?: p.Flex<"p">;
  action2?: p.Flex<"a"> & Partial<LinkProps>;
  emailForm?: p.Flex<typeof EmailForm>;
};

export interface DefaultActionsProps {
  className?: string;
}

function PlasmicActions__RenderFunc(props: {
  variants: PlasmicActions__VariantsArgs;
  args: PlasmicActions__ArgsType;
  overrides: PlasmicActions__OverridesType;
  dataFetches?: PlasmicActions__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <Section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames("__wab_instance", sty.section)}
        content={
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__qOddc)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box___0W7QA
              )}
              id={"help" as const}
            >
              {"How you can help"}
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              hasGap={true}
              className={classNames(defaultcss.all, sty.columns)}
            >
              <div className={classNames(defaultcss.all, sty.column__r592T)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__rCOxh)}
                >
                  <InfoCard
                    className={classNames(
                      "__wab_instance",
                      sty.infoCard__bG18N
                    )}
                    mobile={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? undefined
                        : ("mobile" as const)
                    }
                    title={
                      <p
                        data-plasmic-name={"title2"}
                        data-plasmic-override={overrides.title2}
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.title2
                        )}
                      >
                        {"Purchase from businesses assessed by Clove"}
                      </p>
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__yOiav
                      )}
                    >
                      <span>
                        <span style={{ fontStyle: "italic" }}>{"01"}</span>
                      </span>
                    </div>
                  </InfoCard>

                  <InfoCard
                    className={classNames(
                      "__wab_instance",
                      sty.infoCard___2WGq
                    )}
                    colors={"offWhite" as const}
                    mobile={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? undefined
                        : ("mobile" as const)
                    }
                    title={
                      <p.PlasmicLink
                        data-plasmic-name={"action2"}
                        data-plasmic-override={overrides.action2}
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.action2
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {
                          "Encourage your favorite local business to get assessed"
                        }
                      </p.PlasmicLink>
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__o1Xiq
                      )}
                    >
                      <span>
                        <span style={{ fontStyle: "italic" }}>{"02"}</span>
                      </span>
                    </div>
                  </InfoCard>
                </p.Stack>
              </div>

              <div className={classNames(defaultcss.all, sty.column__j4H3S)}>
                <InfoCard
                  className={classNames("__wab_instance", sty.infoCard__iFpux)}
                  colors={"purple" as const}
                  mobile={
                    hasVariant(globalVariants, "screen", "desktop")
                      ? undefined
                      : ("mobile" as const)
                  }
                  title={
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.box__kgpIz)}
                    >
                      <div
                        className={classNames(defaultcss.all, sty.box__xxMjI)}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__igVc0
                          )}
                        >
                          {"Connect with us to stay involved! "}
                        </div>

                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box___8Ndeo
                          )}
                        >
                          {"You'll be the first to know about our progress."}
                        </div>
                      </div>

                      <EmailForm
                        data-plasmic-name={"emailForm"}
                        data-plasmic-override={overrides.emailForm}
                        className={classNames("__wab_instance", sty.emailForm)}
                      />
                    </p.Stack>
                  }
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__xfQt
                    )}
                  >
                    <span>
                      <span style={{ fontStyle: "italic" }}>{"03"}</span>
                    </span>
                  </div>
                </InfoCard>
              </div>
            </p.Stack>
          </p.Stack>
        }
        thinPadding={undefined}
        width={"wide" as const}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "section", "columns", "title2", "action2", "emailForm"],
  section: ["section", "columns", "title2", "action2", "emailForm"],
  columns: ["columns", "title2", "action2", "emailForm"],
  title2: ["title2"],
  action2: ["action2"],
  emailForm: ["emailForm"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: typeof Section;
  columns: "div";
  title2: "p";
  action2: "a";
  emailForm: typeof EmailForm;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActions__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActions__VariantsArgs;
    args?: PlasmicActions__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicActions__Fetches;
  } & Omit<PlasmicActions__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicActions__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicActions__ArgProps,
      internalVariantPropNames: PlasmicActions__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicActions__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActions";
  } else {
    func.displayName = `PlasmicActions.${nodeName}`;
  }
  return func;
}

export const PlasmicActions = Object.assign(
  // Top-level PlasmicActions renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    columns: makeNodeComponent("columns"),
    title2: makeNodeComponent("title2"),
    action2: makeNodeComponent("action2"),
    emailForm: makeNodeComponent("emailForm"),

    // Metadata about props expected for PlasmicActions
    internalVariantProps: PlasmicActions__VariantProps,
    internalArgProps: PlasmicActions__ArgProps
  }
);

export default PlasmicActions;
/* prettier-ignore-end */
