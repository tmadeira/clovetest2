// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eV7Xi9hgseajGR8GcVFgnT
// Component: YXmRSRV_99aVW
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Page from "../../Page"; // plasmic-import: sCBjEr90b1mbPB/component
import Section from "../../Section"; // plasmic-import: iMtv5NCElk1PK/component
import Landing from "../../Landing"; // plasmic-import: Q7JAreKlD_imW/component
import DemoImage from "../../DemoImage"; // plasmic-import: HuPbUB6jaqsHQR/component
import ProcessCard from "../../ProcessCard"; // plasmic-import: acUXApEsmhTkwY/component
import ImpactSection from "../../ImpactSection"; // plasmic-import: tmt8YJ3U6WhwTS/component
import Actions from "../../Actions"; // plasmic-import: CkvbJP0C9UinrQ/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: -L1czsd8IbhiAH/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_clove_website.module.css"; // plasmic-import: eV7Xi9hgseajGR8GcVFgnT/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: YXmRSRV_99aVW/css

import DownArrowsvgIcon from "./icons/PlasmicIcon__DownArrowsvg"; // plasmic-import: SjIeMEwt2LxX7p/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>("children");

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  page?: p.Flex<typeof Page>;
  sections?: p.Flex<"div">;
  landing?: p.Flex<typeof Landing>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  p?: p.Flex<"p">;
  svg?: p.Flex<"svg">;
  demoImage?: p.Flex<typeof DemoImage>;
  columns?: p.Flex<"div">;
  impactSection?: p.Flex<typeof ImpactSection>;
  actions?: p.Flex<typeof Actions>;
};

export interface DefaultHomepageProps {
  dataFetches: PlasmicHomepage__Fetches;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  dataFetches?: PlasmicHomepage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{"Clove"}</title>
        <meta key="og:title" property="og:title" content={"Clove"} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={"Clove is a nonprofit helping you find sustainable products"}
        />
        <meta
          key="og:image"
          property="og:image"
          content={
            "https://site-assets.plasmic.app/b146f68522fed51b13b09fc299fd9dcf.png"
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Page
            data-plasmic-name={"page"}
            data-plasmic-override={overrides.page}
            className={classNames("__wab_instance", sty.page)}
            content={
              <div
                data-plasmic-name={"sections"}
                data-plasmic-override={overrides.sections}
                className={classNames(defaultcss.all, sty.sections)}
              >
                <div className={classNames(defaultcss.all, sty.freeBox__wb3Q)}>
                  <Section
                    className={classNames("__wab_instance", sty.section__pfXIc)}
                    content={
                      true ? (
                        <Landing
                          data-plasmic-name={"landing"}
                          data-plasmic-override={overrides.landing}
                          action={
                            true
                              ? p.renderPlasmicSlot({
                                  defaultContents:
                                    "Pioneer a sustainable future when shopping online",
                                  value: args.children,
                                  className: classNames(sty.slotChildren)
                                })
                              : null
                          }
                          bottomAction={
                            <div
                              className={classNames(
                                defaultcss.all,
                                sty.freeBox__aPnw7
                              )}
                            >
                              <p.PlasmicLink
                                data-plasmic-name={"link"}
                                data-plasmic-override={overrides.link}
                                className={classNames(defaultcss.all, sty.link)}
                                component={Link}
                                href={"#help" as const}
                                platform={"nextjs"}
                              >
                                <p
                                  data-plasmic-name={"p"}
                                  data-plasmic-override={overrides.p}
                                  className={classNames(
                                    defaultcss.all,
                                    defaultcss.__wab_text,
                                    sty.p
                                  )}
                                >
                                  {"Find out how you can help"}
                                </p>

                                <DownArrowsvgIcon
                                  data-plasmic-name={"svg"}
                                  data-plasmic-override={overrides.svg}
                                  className={classNames(
                                    defaultcss.all,
                                    sty.svg
                                  )}
                                  role={"img"}
                                />
                              </p.PlasmicLink>
                            </div>
                          }
                          className={classNames("__wab_instance", sty.landing)}
                        />
                      ) : null
                    }
                    thinTopDownPadding={"thinTopDownPadding" as const}
                  />
                </div>

                <div className={classNames(defaultcss.all, sty.freeBox__hnE)}>
                  <Section
                    className={classNames("__wab_instance", sty.section__vv4Iq)}
                    content={
                      <React.Fragment>
                        {true ? (
                          <DemoImage
                            data-plasmic-name={"demoImage"}
                            data-plasmic-override={overrides.demoImage}
                            className={classNames(
                              "__wab_instance",
                              sty.demoImage
                            )}
                          />
                        ) : null}

                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.freeBox___4PWqJ
                          )}
                        >
                          {
                            "Clove is a nonprofit helping you find sustainable products"
                          }
                        </div>
                      </React.Fragment>
                    }
                  />
                </div>

                <div className={classNames(defaultcss.all, sty.freeBox__fDxtr)}>
                  <Section
                    className={classNames("__wab_instance", sty.section__qkZi0)}
                    content={
                      <div
                        className={classNames(
                          defaultcss.all,
                          sty.freeBox__fjL1
                        )}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.freeBox__da7K7
                          )}
                        >
                          {"How Clove Works"}
                        </div>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"columns"}
                          data-plasmic-override={overrides.columns}
                          hasGap={true}
                          className={classNames(defaultcss.all, sty.columns)}
                        >
                          <div
                            className={classNames(
                              defaultcss.all,
                              sty.column__r3IcH
                            )}
                          >
                            <ProcessCard
                              className={classNames(
                                "__wab_instance",
                                sty.processCard__nrR1Q
                              )}
                              slot={
                                <img
                                  alt={""}
                                  className={classNames(
                                    defaultcss.img,
                                    sty.img__nWq4P
                                  )}
                                  role={"img"}
                                  src={
                                    "/plasmic/copy_of_clove_website/images/surveyIconpng.png"
                                  }
                                />
                              }
                            >
                              <div
                                className={classNames(
                                  defaultcss.all,
                                  defaultcss.__wab_text,
                                  sty.freeBox__sQMcm
                                )}
                              >
                                <span>
                                  <span style={{ fontStyle: "italic" }}>
                                    {"01"}
                                  </span>
                                </span>
                              </div>
                            </ProcessCard>
                          </div>

                          <div
                            className={classNames(
                              defaultcss.all,
                              sty.column__urEok
                            )}
                          >
                            <ProcessCard
                              className={classNames(
                                "__wab_instance",
                                sty.processCard__jerz5
                              )}
                              colors={"offWhite" as const}
                              slot={
                                <img
                                  alt={""}
                                  className={classNames(
                                    defaultcss.img,
                                    sty.img__ncQ6V
                                  )}
                                  role={"img"}
                                  src={
                                    "/plasmic/copy_of_clove_website/images/codeSnippetspng.png"
                                  }
                                />
                              }
                              title={
                                "We help these businesses add our label to their online store."
                              }
                            >
                              <div
                                className={classNames(
                                  defaultcss.all,
                                  defaultcss.__wab_text,
                                  sty.freeBox__uCEmy
                                )}
                              >
                                <span>
                                  <span style={{ fontStyle: "italic" }}>
                                    {"02"}
                                  </span>
                                </span>
                              </div>
                            </ProcessCard>
                          </div>

                          <div
                            className={classNames(
                              defaultcss.all,
                              sty.column__lbnZb
                            )}
                          >
                            <ProcessCard
                              className={classNames(
                                "__wab_instance",
                                sty.processCard__iJuDr
                              )}
                              colors={"purple" as const}
                              slot={
                                <img
                                  alt={""}
                                  className={classNames(
                                    defaultcss.img,
                                    sty.img___8D1Qf
                                  )}
                                  role={"img"}
                                  src={
                                    "/plasmic/copy_of_clove_website/images/emailCapturepng.png"
                                  }
                                />
                              }
                              title={
                                "You see our labels when shopping and can make sustainable purchases."
                              }
                            >
                              <div
                                className={classNames(
                                  defaultcss.all,
                                  defaultcss.__wab_text,
                                  sty.freeBox__mudoY
                                )}
                              >
                                <span>
                                  <span style={{ fontStyle: "italic" }}>
                                    {"03"}
                                  </span>
                                </span>
                              </div>
                            </ProcessCard>
                          </div>
                        </p.Stack>
                      </div>
                    }
                    thinPadding={undefined}
                    width={"veryWide" as const}
                  />
                </div>

                <div className={classNames(defaultcss.all, sty.freeBox__rKfj1)}>
                  <Section
                    className={classNames("__wab_instance", sty.section__qMt1Y)}
                    content={
                      <ImpactSection
                        data-plasmic-name={"impactSection"}
                        data-plasmic-override={overrides.impactSection}
                        className={classNames(
                          "__wab_instance",
                          sty.impactSection
                        )}
                        mobile={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? undefined
                            : ("mobile" as const)
                        }
                      />
                    }
                    width={"wide" as const}
                  />
                </div>

                <div className={classNames(defaultcss.all, sty.freeBox__qLqfd)}>
                  <Actions
                    data-plasmic-name={"actions"}
                    data-plasmic-override={overrides.actions}
                    className={classNames("__wab_instance", sty.actions)}
                  />
                </div>
              </div>
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "page",
    "sections",
    "landing",
    "link",
    "p",
    "svg",
    "demoImage",
    "columns",
    "impactSection",
    "actions"
  ],
  page: [
    "page",
    "sections",
    "landing",
    "link",
    "p",
    "svg",
    "demoImage",
    "columns",
    "impactSection",
    "actions"
  ],
  sections: [
    "sections",
    "landing",
    "link",
    "p",
    "svg",
    "demoImage",
    "columns",
    "impactSection",
    "actions"
  ],
  landing: ["landing", "link", "p", "svg"],
  link: ["link", "p", "svg"],
  p: ["p"],
  svg: ["svg"],
  demoImage: ["demoImage"],
  columns: ["columns"],
  impactSection: ["impactSection"],
  actions: ["actions"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  page: typeof Page;
  sections: "div";
  landing: typeof Landing;
  link: "a";
  p: "p";
  svg: "svg";
  demoImage: typeof DemoImage;
  columns: "div";
  impactSection: typeof ImpactSection;
  actions: typeof Actions;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHomepage__Fetches;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    page: makeNodeComponent("page"),
    sections: makeNodeComponent("sections"),
    landing: makeNodeComponent("landing"),
    link: makeNodeComponent("link"),
    p: makeNodeComponent("p"),
    svg: makeNodeComponent("svg"),
    demoImage: makeNodeComponent("demoImage"),
    columns: makeNodeComponent("columns"),
    impactSection: makeNodeComponent("impactSection"),
    actions: makeNodeComponent("actions"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
