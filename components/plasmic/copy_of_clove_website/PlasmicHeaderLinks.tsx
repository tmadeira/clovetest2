// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eV7Xi9hgseajGR8GcVFgnT
// Component: xnRJlhLH2Edsl
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_clove_website.module.css"; // plasmic-import: eV7Xi9hgseajGR8GcVFgnT/projectcss
import * as sty from "./PlasmicHeaderLinks.module.css"; // plasmic-import: xnRJlhLH2Edsl/css

export type PlasmicHeaderLinks__VariantMembers = {
  verticalStack: "verticalStack";
  goBack: "goBack";
};

export type PlasmicHeaderLinks__VariantsArgs = {
  verticalStack?: SingleBooleanChoiceArg<"verticalStack">;
  goBack?: SingleBooleanChoiceArg<"goBack">;
};

type VariantPropType = keyof PlasmicHeaderLinks__VariantsArgs;
export const PlasmicHeaderLinks__VariantProps = new Array<VariantPropType>(
  "verticalStack",
  "goBack"
);

export type PlasmicHeaderLinks__ArgsType = {};
type ArgPropType = keyof PlasmicHeaderLinks__ArgsType;
export const PlasmicHeaderLinks__ArgProps = new Array<ArgPropType>();

export type PlasmicHeaderLinks__OverridesType = {
  root?: p.Flex<"div">;
  ourPartners?: p.Flex<"a"> & Partial<LinkProps>;
  contact?: p.Flex<"a"> & Partial<LinkProps>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultHeaderLinksProps {
  verticalStack?: SingleBooleanChoiceArg<"verticalStack">;
  goBack?: SingleBooleanChoiceArg<"goBack">;
  className?: string;
}

function PlasmicHeaderLinks__RenderFunc(props: {
  variants: PlasmicHeaderLinks__VariantsArgs;
  args: PlasmicHeaderLinks__ArgsType;
  overrides: PlasmicHeaderLinks__OverridesType;
  dataFetches?: PlasmicHeaderLinks__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__verticalStack]: hasVariant(
          variants,
          "verticalStack",
          "verticalStack"
        )
      })}
    >
      {false ? (
        <p.PlasmicLink
          data-plasmic-name={"ourPartners"}
          data-plasmic-override={overrides.ourPartners}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.ourPartners
          )}
          component={Link}
          href={"/partners" as const}
          platform={"nextjs"}
        >
          {"PARTNERS"}
        </p.PlasmicLink>
      ) : null}
      {true ? (
        <p.PlasmicLink
          data-plasmic-name={"contact"}
          data-plasmic-override={overrides.contact}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.contact
          )}
          component={Link}
          href={"/contact" as const}
          platform={"nextjs"}
        >
          {"Contact"}
        </p.PlasmicLink>
      ) : null}

      <p.PlasmicLink
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(defaultcss.all, defaultcss.__wab_text, sty.link, {
          [sty.link__goBack]: hasVariant(variants, "goBack", "goBack"),
          [sty.link__verticalStack]: hasVariant(
            variants,
            "verticalStack",
            "verticalStack"
          )
        })}
        component={Link}
        href={
          hasVariant(variants, "goBack", "goBack")
            ? ("/" as const)
            : ("/business" as const)
        }
        platform={"nextjs"}
      >
        {hasVariant(variants, "goBack", "goBack")
          ? "CLOVE FOR USERS"
          : "CLOVE FOR BUSINESS"}
      </p.PlasmicLink>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "ourPartners", "contact", "link"],
  ourPartners: ["ourPartners"],
  contact: ["contact"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  ourPartners: "a";
  contact: "a";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeaderLinks__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeaderLinks__VariantsArgs;
    args?: PlasmicHeaderLinks__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHeaderLinks__Fetches;
  } & Omit<PlasmicHeaderLinks__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeaderLinks__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeaderLinks__ArgProps,
      internalVariantPropNames: PlasmicHeaderLinks__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHeaderLinks__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeaderLinks";
  } else {
    func.displayName = `PlasmicHeaderLinks.${nodeName}`;
  }
  return func;
}

export const PlasmicHeaderLinks = Object.assign(
  // Top-level PlasmicHeaderLinks renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    ourPartners: makeNodeComponent("ourPartners"),
    contact: makeNodeComponent("contact"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicHeaderLinks
    internalVariantProps: PlasmicHeaderLinks__VariantProps,
    internalArgProps: PlasmicHeaderLinks__ArgProps
  }
);

export default PlasmicHeaderLinks;
/* prettier-ignore-end */
