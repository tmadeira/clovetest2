// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eV7Xi9hgseajGR8GcVFgnT
// Component: tmt8YJ3U6WhwTS
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: -L1czsd8IbhiAH/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_clove_website.module.css"; // plasmic-import: eV7Xi9hgseajGR8GcVFgnT/projectcss
import * as sty from "./PlasmicImpactSection.module.css"; // plasmic-import: tmt8YJ3U6WhwTS/css

export type PlasmicImpactSection__VariantMembers = {
  mobile: "mobile";
};

export type PlasmicImpactSection__VariantsArgs = {
  mobile?: SingleBooleanChoiceArg<"mobile">;
};

type VariantPropType = keyof PlasmicImpactSection__VariantsArgs;
export const PlasmicImpactSection__VariantProps = new Array<VariantPropType>(
  "mobile"
);

export type PlasmicImpactSection__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicImpactSection__ArgsType;
export const PlasmicImpactSection__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicImpactSection__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<"img">;
};

export interface DefaultImpactSectionProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  mobile?: SingleBooleanChoiceArg<"mobile">;
  className?: string;
}

function PlasmicImpactSection__RenderFunc(props: {
  variants: PlasmicImpactSection__VariantsArgs;
  args: PlasmicImpactSection__ArgsType;
  overrides: PlasmicImpactSection__OverridesType;
  dataFetches?: PlasmicImpactSection__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {(
        hasVariant(variants, "mobile", "mobile")
          ? false
          : hasVariant(globalVariants, "screen", "tablet")
          ? true
          : true
      ) ? (
        <img
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(defaultcss.img, sty.img, {
            [sty.img__mobile]: hasVariant(variants, "mobile", "mobile")
          })}
          role={"img"}
          src={"/plasmic/copy_of_clove_website/images/cloveLeafpng.png"}
        />
      ) : null}

      <div className={classNames(defaultcss.all, sty.freeBox__i5J5H)}>
        <div className={classNames(defaultcss.all, sty.freeBox__b80By)}>
          {p.renderPlasmicSlot({
            defaultContents: "How are we fighting climate change?",
            value: args.children,
            className: classNames(sty.slotChildren, {
              [sty.slotChildren__mobile]: hasVariant(
                variants,
                "mobile",
                "mobile"
              )
            })
          })}
        </div>

        <div className={classNames(defaultcss.all, sty.freeBox___50Wys)}>
          {p.renderPlasmicSlot({
            defaultContents:
              "By measuring the environmental impact of products, we help you shop sustainably. As you change your purchasing habits, businesses will need to make their products more sustainable to remain competitive, reducing our collective greenhouse gas emissions.",
            value: args.slot,
            className: classNames(sty.slotSlot, {
              [sty.slotSlot__mobile]: hasVariant(variants, "mobile", "mobile")
            })
          })}
        </div>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: "img";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicImpactSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicImpactSection__VariantsArgs;
    args?: PlasmicImpactSection__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicImpactSection__Fetches;
  } & Omit<PlasmicImpactSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicImpactSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicImpactSection__ArgProps,
      internalVariantPropNames: PlasmicImpactSection__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicImpactSection__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicImpactSection";
  } else {
    func.displayName = `PlasmicImpactSection.${nodeName}`;
  }
  return func;
}

export const PlasmicImpactSection = Object.assign(
  // Top-level PlasmicImpactSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicImpactSection
    internalVariantProps: PlasmicImpactSection__VariantProps,
    internalArgProps: PlasmicImpactSection__ArgProps
  }
);

export default PlasmicImpactSection;
/* prettier-ignore-end */
