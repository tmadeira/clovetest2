// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eV7Xi9hgseajGR8GcVFgnT
// Component: swBP63kONzdkSI
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TeamMemberCard from "../../TeamMemberCard"; // plasmic-import: 7tob782ltHq5pD/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: -L1czsd8IbhiAH/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_clove_website.module.css"; // plasmic-import: eV7Xi9hgseajGR8GcVFgnT/projectcss
import * as sty from "./PlasmicTeamMembers.module.css"; // plasmic-import: swBP63kONzdkSI/css

export type PlasmicTeamMembers__VariantMembers = {};

export type PlasmicTeamMembers__VariantsArgs = {};
type VariantPropType = keyof PlasmicTeamMembers__VariantsArgs;
export const PlasmicTeamMembers__VariantProps = new Array<VariantPropType>();

export type PlasmicTeamMembers__ArgsType = {};
type ArgPropType = keyof PlasmicTeamMembers__ArgsType;
export const PlasmicTeamMembers__ArgProps = new Array<ArgPropType>();

export type PlasmicTeamMembers__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultTeamMembersProps {
  className?: string;
}

function PlasmicTeamMembers__RenderFunc(props: {
  variants: PlasmicTeamMembers__VariantsArgs;
  args: PlasmicTeamMembers__ArgsType;
  overrides: PlasmicTeamMembers__OverridesType;
  dataFetches?: PlasmicTeamMembers__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.freeBox__r9CfO)}>
        <TeamMemberCard
          className={classNames("__wab_instance", sty.teamMemberCard__zUfeo)}
          image={
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__zy5Uj)}
              role={"img"}
              src={"/plasmic/copy_of_clove_website/images/profilejpeg.jpeg"}
            />
          }
          linkedin={"https://www.linkedin.com/in/staad/" as const}
        />

        <TeamMemberCard
          className={classNames("__wab_instance", sty.teamMemberCard__lmsZq)}
          image={
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__nPc7Z)}
              role={"img"}
              src={"/plasmic/copy_of_clove_website/images/surya2Png.jpeg"}
            />
          }
          linkedin={"https://www.linkedin.com/in/suryakrsh/" as const}
          name={"Surya Krishnan"}
        />

        <TeamMemberCard
          className={classNames("__wab_instance", sty.teamMemberCard__qUyd3)}
          image={
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__oPmIl)}
              role={"img"}
              src={"/plasmic/copy_of_clove_website/images/miraalpng.png"}
            />
          }
          linkedin={"https://www.linkedin.com/in/miraalkabir/" as const}
          name={"Miraal Kabir"}
          role={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__dM6Q
              )}
            >
              {"Design Lead"}
            </div>
          }
        />
      </div>

      <div className={classNames(defaultcss.all, sty.freeBox__fLW)}>
        <TeamMemberCard
          className={classNames("__wab_instance", sty.teamMemberCard__dvFD)}
          image={
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__mJlSo)}
              role={"img"}
              src={"/plasmic/copy_of_clove_website/images/tailaipng.jpeg"}
            />
          }
          linkedin={"https://www.linkedin.com/in/tailai-wang/" as const}
          name={"Tailai Wang"}
          role={"Software Lead"}
        />

        <TeamMemberCard
          className={classNames("__wab_instance", sty.teamMemberCard___5FbU)}
          image={
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__agDXt)}
              role={"img"}
              src={"/plasmic/copy_of_clove_website/images/rahmapng2.png"}
            />
          }
          linkedin={"https://www.linkedin.com/in/rahmagillan/" as const}
          name={"Rahma Gillan"}
          role={"Software Lead"}
        />

        <TeamMemberCard
          className={classNames("__wab_instance", sty.teamMemberCard__sivPk)}
          image={
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img___47Ab3)}
              role={"img"}
              src={
                "/plasmic/copy_of_clove_website/images/braydenProfilejpg2.jpeg"
              }
            />
          }
          linkedin={"https://www.linkedin.com/in/braydenr/" as const}
          name={"Brayden Royston"}
          role={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__sxzzQ
              )}
            >
              {"Frontend Developer"}
            </div>
          }
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTeamMembers__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTeamMembers__VariantsArgs;
    args?: PlasmicTeamMembers__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTeamMembers__Fetches;
  } & Omit<PlasmicTeamMembers__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTeamMembers__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTeamMembers__ArgProps,
      internalVariantPropNames: PlasmicTeamMembers__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTeamMembers__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTeamMembers";
  } else {
    func.displayName = `PlasmicTeamMembers.${nodeName}`;
  }
  return func;
}

export const PlasmicTeamMembers = Object.assign(
  // Top-level PlasmicTeamMembers renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicTeamMembers
    internalVariantProps: PlasmicTeamMembers__VariantProps,
    internalArgProps: PlasmicTeamMembers__ArgProps
  }
);

export default PlasmicTeamMembers;
/* prettier-ignore-end */
